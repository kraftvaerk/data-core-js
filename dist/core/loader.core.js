'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a},_mimeType=require('./mime-type.core'),_mimeType2=_interopRequireDefault(_mimeType),_sanitize2=require('./sanitize.core'),_sanitize3=_interopRequireDefault(_sanitize2),_exception2=require('./exception.core'),_exception3=_interopRequireDefault(_exception2),_utility=require('../common/utility.common');function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}// available fetch request types
var requestTypes=['GET','HEAD','POST','PUT','DELETE','TRACE','OPTIONS','CONNECT','PATCH'],appendHeaders=function(a)/* array containing header objects */{var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[];if(a=a||new Headers,!b.length)return a;for(var c=0,d=b.length;c<d;c++)a.append(Object.keys(b[c])[0],Object.values(b[c])[0]);return a},loader={get:function e(a/* { method = '', url = '', data = {}, headers = [], ...args } */){if(!a.url)throw new TypeError('loader.get => options.url is invalid, null or undefined');var b='';if(a.data&&'object'===_typeof(a.data))for(var f in a.data)b+='&'+f+'='+encodeURIComponent(a.data[f]);0<b.length&&(b='?'+b.slice(1));// generate options and headers (extend if neccessary)
var c=appendHeaders(new Headers({Accept:_mimeType2.default.json,"Content-Type":_mimeType2.default.json}),a.headers),d=Object.assign({method:'GET',credentials:'include',headers:c},a.args);return fetch(a.url+b,d)},head:function a()/* {} */{throw new Error('loader.head => not yet implemented...')},post:function d(a/* { method = '', url = '', data = {}, headers = [], ...args } */){if(!a.url)throw new TypeError('loader.post => options.url is invalid, null or undefined');// generate headers (extend if neccessary)
var b=appendHeaders(new Headers({Accept:_mimeType2.default.json,"Content-Type":_mimeType2.default.json}),a.headers),c=Object.assign({headers:b,method:'POST',body:(0,_utility.stringify)(a.data||{}),credentials:'include'},a.args);// request options
return fetch(a.url,c)},put:function d(a/* { method = '', url = '', data = {}, headers = [], ...args } */){if(!a.url)throw new TypeError('loader.post => options.url is invalid, null or undefined');// generate headers (extend if neccessary)
var b=appendHeaders(new Headers({Accept:_mimeType2.default.json,"Content-Type":_mimeType2.default.json}),a.headers),c=Object.assign({headers:b,method:'PUT',body:(0,_utility.stringify)(a.data||{}),credentials:'include'},a.args);// request options
return fetch(a.url,c)},delete:function a()/* {} */{throw new Error('loader.delete => not yet implemented...')},trace:function a()/* {} */{throw new Error('loader.trace => not yet implemented...')},options:function a()/* {} */{throw new Error('loader.options => not yet implemented...')},connect:function a()/* {} */{throw new Error('loader.connect => not yet implemented...')},do:function b(a/* { method = '', url = '', data = {}, headers = [], ...args } */){if(!a)throw new TypeError('loader.do => options is invalid, null or undefined');if(!a.method||-1===requestTypes.indexOf(a.method.toUpperCase()))throw new TypeError('loader.do => options.method is invalid, null or undefined');if(!a.url)throw new TypeError('loader.do => options.url is invalid, null or undefined');// execute the xhr request
return this[a.method.toLowerCase()](a).then(function(a){// cast a custom exception to manage invalid status codes from the service calls
if(!a.ok){var b='response.status: '+a.status+' | url: '+a.url;return _sanitize3.default.core(a).then(function(a){throw new _exception3.default.InvalidResponseError(b,a)})}// return response copy
return a.clone()}).catch(function(a){throw a})},sync:function a(){throw new Error('loader.sync => not yet implemented...')}};// append headers to header instance
// loader core (get, post, do)
exports.default=loader,module.exports=exports.default;