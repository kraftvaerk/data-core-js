{"version":3,"sources":["..\\src/core/endpoint.core.js","..\\src/core/mime-type.core.js","..\\src/core/sanitize.core.js","..\\src/core/exception.core.js","..\\src/common/utility.common.js","..\\src/core/loader.core.js","..\\src/api/global.api.js","..\\src/index.js","index.debug.js"],"names":["Endpoint","method","url","data","headers","Array","args","Object","assign","additionalArgs","mime","css","html","script","json","xml","xhtml","stream","sanitize","core","response","contentType","get","includes","_mime","text","blob","TypeError","InvalidResponseError","message","exc","name","prototype","Error","stringify","object","JSON","parseJSON","parse","clone","replacePlaceholderParams","placeholder","values","limit","regex","RegExp","index","count","length","tag","nextTag","tagExistsInPlaceholder","indexOf","nextTagExistsInPlaceholder","trimToIndex","result","substring","replace","match","split","substringStartIndex","substringLength","undefined","manipulated","toString","replaceObjectParams","model","constructor","regexJSONPlaceholder","regexPlaceholderIndex","placeholderIndex","replaceStringParams","string","loader","requestTypes","appendHeaders","header","Headers","i","append","keys","options","query","prop","encodeURIComponent","slice","fetchOptions","credentials","fetch","head","post","construct","body","put","delete","trace","connect","do","toUpperCase","toLowerCase","then","ok","status","_sanitize","_exception","catch","error","sync","queue","api","call","endpoint","type","_loader","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBeA;;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,EAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,mCAAAA,CAAAA;AAAAA;;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,WAAAA,IAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,EAAAA;AAAAA,YAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,CAAAA,UAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,YAAAA,GAAAA,CAAAA,CAAAA,EAAAA,WAAAA,CAAAA,KAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,GAAAA,KAAAA,CAAAA;;AArBTA,QAAAA,CAAAA,GAqBSA,YAAAA;AApB+D,eAAA,CAAA,GAAA;AAA7DC,YAAAA,CAAAA,GAAS,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,KAATA;AAAAA,YAAgBC,CAAAA,GAAM,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,GAAtBD;AAAAA,YAA2BE,CAAAA,GAAO,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAlCF;AAAAA,YAAsCG,CAAAA,GAAU,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAhDH;AAA6D,QAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EACrEG,CAAAA,GAAWA,CAAAA,YAAmBC,KAAnBD,GAA4BA,CAA5BA,GAAsC,CAACA,CAAD,CADoB,EAGjEH,KAAAA,MAAAA,GAASA,CAHwD,EAIjEC,KAAAA,GAAAA,GAAMA,CAJ2D,EAKjEC,KAAAA,IAAAA,GAAOA,CAL0D,EAMjEC,KAAAA,OAAAA,GAAUA,CANuD;;AAANE,aAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAM,IAAA,KAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAANA,EAAM,CAAA,GAAA,CAANA,EAAM,CAAA,GAAA,CAANA,EAAM,CAAA,EAANA;AAAAA,UAAAA,CAAAA,CAAM,CAAA,GAAA,CAANA,CAAAA,GAAM,SAAA,CAAA,CAAA,CAANA;AAAAA;;AAO3DA,aAAAA,IAAAA,GAAOC,MAAAA,CAAOC,MAAPD,CAAAA,KAAAA,CAAAA,MAAAA,EAAc,CAAA,EAAA,EAAOD,MAAP,CAAOA,CAAP,CAAdC,CAAPD;AAaEN;;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,QAAAA,GAAAA,EAAAA,SAAAA;AAVgB,QAAA,KAAA,EAAA,iBAAA;AAAhBS,eAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAgB,IAAA,KAAA,CAAA,CAAA,CAAhBA,EAAgB,CAAA,GAAA,CAAhBA,EAAgB,CAAA,GAAA,CAAhBA,EAAgB,CAAA,EAAhBA;AAAAA,YAAAA,CAAAA,CAAgB,CAAhBA,CAAAA,GAAgB,SAAA,CAAA,CAAA,CAAhBA;AAAAA;;AACAF,iBAAAA,MAAAA,CAAOC,MAAPD,CAAAA,KAAAA,CAAAA,MAAAA,EAAc,CAAA;AACjBN,YAAAA,MAAAA,EAAQ,KAAKA,MADI;AAEjBC,YAAAA,GAAAA,EAAK,KAAKA,GAFO;AAGjBC,YAAAA,IAAAA,EAAM,KAAKA,IAHM;AAIjBC,YAAAA,OAAAA,EAAS,KAAKA;AAJG,WAAA,EAKlB,KAAKE,IALa,EAKJG,MALI,CAKJA,CALI,CAAdF,CAAAA;AAKUE;AAIVT,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,EArBTA;AAAAA,QAqBSA,CAAAA,GAAAA,CArBTA;;AAqBSA,IAAAA,OAAAA,CAAAA,OAAAA,GAAAA,CAAAA;;;ACRAU;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,GAAAA,KAAAA,CAAAA;AAbf,QAAMA,CAAAA,GAAO;AAETC,MAAAA,GAAAA,EAAQ,UAFC;AAGTC,MAAAA,IAAAA,EAAQ,WAHC;AAITC,MAAAA,MAAAA,EAAQ,iBAJC;AAMTC,MAAAA,IAAAA,EAAQ,kBANC;AAOTC,MAAAA,GAAAA,EAAQ,iBAPC;AAQTC,MAAAA,KAAAA,EAAQ,uBARC;AASTC,MAAAA,MAAAA,EAAQ;AATC,KAAb;AAAA,QAaeP,CAAAA,GAAAA,CAbf;AAaeA,IAAAA,OAAAA,CAAAA,OAAAA,GAAAA,CAAAA;;;ACoBAQ;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,GAAAA,KAAAA,CAAAA;AAlCf,QAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAkCeA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,GAAAA;AAAAA,QAAAA,OAAAA,EAAAA;AAAAA,OAAAA;AA9Bf;;AAAA,QAAMA,CAAAA,GAAW;AAEbC,MAAAA,IAAAA,EAAM,cAACC,CAAD,EAACA;AACCC,YAAAA,CAAAA,GAAcD,CAAAA,CAAShB,OAATgB,GAAmBA,CAAAA,CAAShB,OAATgB,CAAiBE,GAAjBF,CAAqB,cAArBA,CAAnBA,GAA0D,EAAxEC;AACAA,YAAAA,CAAAA,CAAYE,QAAZF,CAAqBG,CAAAA,CAAMV,OAANU,CAAMV,IAA3BO,CAAAA,EAAkC,OAAOD,CAAAA,CAASN,IAATM,EAAP;AAClCC,YAAAA,CAAAA,CAAYE,QAAZF,CAAqBG,CAAAA,CAAMZ,OAANY,CAAMZ,IAA3BS,CAAAA,EAAkC,OAAOD,CAAAA,CAASK,IAATL,EAAP;AAClCC,YAAAA,CAAAA,CAAYE,QAAZF,CAAqBG,CAAAA,CAAMP,OAANO,CAAMP,MAA3BI,CAAAA,EAAoC,OAAOD,CAAAA,CAASM,IAATN,EAAP;AAClC,cAAA,IAAIO,SAAJ,CAAc,4BAAd,CAAA;AAAc,OAPX;AAUbb,MAAAA,IAAAA,EAAM,cAACM,CAAD,EAACA;AAECC,YAAAA,CADcD,CAAAA,CAAShB,OAATgB,GAAmBA,CAAAA,CAAShB,OAATgB,CAAiBE,GAAjBF,CAAqB,cAArBA,CAAnBA,GAA0D,EACxEC,EAAYE,QAAZF,CAAqBG,CAAAA,CAAMV,OAANU,CAAMV,IAA3BO,CAAAA,EAAkC,OAAOD,CAAAA,CAASN,IAATM,EAAP;AAChC,cAAA,IAAIO,SAAJ,CAAc,4BAAd,CAAA;AAAc,OAbX;AAgBbf,MAAAA,IAAAA,EAAM,cAACQ,CAAD,EAACA;AAECC,YAAAA,CADcD,CAAAA,CAAShB,OAATgB,GAAmBA,CAAAA,CAAShB,OAATgB,CAAiBE,GAAjBF,CAAqB,cAArBA,CAAnBA,GAA0D,EACxEC,EAAYE,QAAZF,CAAqBG,CAAAA,CAAMV,OAANU,CAAMV,IAA3BO,CAAAA,EAAkC,OAAOD,CAAAA,CAASK,IAATL,EAAP;AAChC,cAAA,IAAIO,SAAJ,CAAc,4BAAd,CAAA;AAAc,OAnBX;AAsBbV,MAAAA,MAAAA,EAAQ,gBAACG,CAAD,EAACA;AAEDC,YAAAA,CADcD,CAAAA,CAAShB,OAATgB,GAAmBA,CAAAA,CAAShB,OAATgB,CAAiBE,GAAjBF,CAAqB,cAArBA,CAAnBA,GAA0D,EACxEC,EAAYE,QAAZF,CAAqBG,CAAAA,CAAMV,OAANU,CAAMV,IAA3BO,CAAAA,EAAkC,OAAOD,CAAAA,CAASM,IAATN,EAAP;AAChC,cAAA,IAAIO,SAAJ,CAAc,4BAAd,CAAA;AAAc;AAzBX,KAAjB;AAAA,QA8BeT,CAAAA,GAAAA,CA9Bf;AA8BeA,IAAAA,OAAAA,CAAAA,OAAAA,GAAAA,CAAAA;;;;;ACzBA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA,GAAA,OAAA,CAAA,OAAA,GAAA,KAAA,CAAA;;AAPf,QAAMU,CAAAA,GAAuB,aAAA;AAAUC,UAAAA,CAAAA,GAAU,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAVA;AAAAA,UAAcC,CAAAA,GAAM,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,IAApBD;AAC9BE,WAAAA,IAAAA,GAAO,sBAAPA,EACAF,KAAAA,OAAAA,GAAUA,CADVE,EAEAD,KAAAA,GAAAA,GAAMA,CAFNC;AAEMD,KAHf;;AAKAF,IAAAA,CAAAA,CAAqBI,SAArBJ,GAAiC,IAAIK,KAAJ,EAAjCL;AAEe,QAAA,CAAA,GAAA;AAAEA,MAAAA,oBAAAA,EAAAA;AAAF,KAAA;AAAA,IAAA,OAAA,CAAA,OAAA,GAAA,CAAA;;;ACsEA;;AAAA,aAAA,CAAA,CAAA,CAAA,EAAA;AAAA,aAAA,CAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,oBAAA,MAAA,CAAA,QAAA,CAAA,GAAA,UAAA,CAAA,EAAA;AAAA,uBAAA,CAAA;AAAA,OAAA,GAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,IAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,WAAA,KAAA,MAAA,IAAA,CAAA,KAAA,MAAA,CAAA,SAAA,GAAA,QAAA,WAAA,CAAA,CAAA;AAAA,OAAA,EAAA,CAAA,CAAA;AAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA,GAAA,OAAA,CAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,wBAAA,GAAA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,SAAA,GAAA,OAAA,CAAA,SAAA,GAAA,KAAA,CAAA;;AA9ER,QAAMM,CAAAA,GAAY,SAAZA,CAAY,CAACC,CAAD,EAACA;AAAoBC,aAAAA,IAAAA,CAAKF,SAALE,CAAeD,CAAfC,CAAAA;AAAeD,KAAtD;;AA8EQ,IAAA,OAAA,CAAA,SAAA,GAAA,CAAA;;AA3ER,QAAME,CAAAA,GAAY,SAAZA,CAAY,CAACF,CAAD,EAACA;AAAoBC,aAAAA,IAAAA,CAAKE,KAALF,CAAWD,CAAXC,CAAAA;AAAWD,KAAlD;;AA2EQ,IAAA,OAAA,CAAA,SAAA,GAAA,CAAA;;AAxER,QAAMI,CAAAA,GAAQ,SAARA,CAAQ,CAACJ,CAAD,EAACA;AAAoBE,aAAAA,CAAAA,CAAUH,CAAAA,CAAUC,CAAVD,CAAVG,CAAAA;AAAoBF,KAAvD;;AAwEQ,IAAA,OAAA,CAAA,KAAA,GAAA,CAAA;;AAhER,QAAMK,CAAAA,GAA2B,WAACC,CAAD,EAAcC,CAAd,EAAsBC,CAAtB,EAAsBA;AACtD,UAAA,CAACF,CAAD,EAAc,OAAO,EAAP;AACd,UAAuB,YAAA,OAAhBA,CAAP,EAAiC,MAAM,IAAId,SAAJ,CAAc,qDAAd,EAAqEc,CAArE,CAAN;AACjCG,UAAAA,CAAAA,IAAAA,EAAWA,CAAAA,YAAiBC,MAA5BD,CAAAA,EAAqC,MAAM,IAAIjB,SAAJ,CAAc,wFAAd,EAAwGiB,CAAxG,CAAN;AACzCF,MAAAA,CAAAA,GAASA,CAAAA,YAAkBrC,KAAlBqC,GAA0BA,CAA1BA,GAAmC,CAACA,CAAD,CAA5CA;AACME,UAAAA,CAAAA,GAAQ,0BAARA;AAAAA,UAGFE,CAAAA,GAAAA,CAAS,CAHPF;AAAAA,UAIAG,CAAAA,GAAQL,CAAAA,CAAOM,MAJfJ;AAAAA,UAKAK,CAAAA,GAAUF,IAAAA,MAAAA,CAAAA,CAAAA,GAAQ,CAARA,EAAhB,GAAgBA,CALVH;AAAAA,UAMAM,CAAAA,GAAcH,IAAAA,MAAAA,CAAAA,CAAAA,EAApB,GAAoBA,CANdH;AAAAA,UAOAO,CAAAA,GAAyBV,CAAAA,CAAYW,OAAZX,CAAoBQ,CAApBR,IAAoBQ,CAAQ,CAPrDL;AAAAA,UAQAS,CAAAA,GAA6BZ,CAAAA,CAAYW,OAAZX,CAAoBS,CAApBT,IAAoBS,CAAY,CAR7DN;AAAAA,UASAU,CAAAA,GAAcb,CAAAA,CAAYW,OAAZX,CAAoBQ,CAApBR,IAA2BQ,CAAAA,CAAID,MAT7CJ;AAsBCW,aAAAA,CAZPd,CAAAA,GAAeE,CAAAA,GAASF,CAAAA,CAAYe,SAAZf,CAAsB,CAAtBA,EAA0BU,CAAAA,IAA0BE,CAA1BF,GAAwDG,CAAxDH,GAAsEV,CAAAA,CAAYO,MAA5GP,CAATE,GAA+HF,CAYvIc,EATkBE,OASlBF,CAT0BX,CAS1BW,EATiC,UAACG,CAAD,EAACA;AAE/BF,YAAAA,CAAAA,GAAYE,CAAAA,CAAMF,SAANE,CAAgB,CAAhBA,EAAmBA,CAAAA,CAAMV,MAANU,GAAe,CAAlCA,EAAqCC,KAArCD,CAA2C,GAA3CA,CAAZF;AAAAA,YACAI,CAAAA,GAA4C,MAArBJ,CAAAA,CAAUR,MAAW,GAAK,CAAL,GAASQ,CAAAA,CAAU,CAAVA,CAAAA,CAAaG,KAAbH,CAAmB,GAAnBA,EAAwB,CAAxBA,CADrDA;AAAAA,YAEAK,CAAAA,GAAwC,MAArBL,CAAAA,CAAUR,MAAW,GAAXA,KAAgBc,CAAL,GAAiBN,CAAAA,CAAU,CAAVA,CAAAA,CAAaG,KAAbH,CAAmB,GAAnBA,EAAwB,CAAxBA,CAFzDA;AAICO,eAAAA,EADgBjB,CAChBiB,GADwBhB,CACxBgB,GADwBhB,KAA4Be,CAA5Bf,KAAUL,CAAAA,CAAOI,CAAPJ,CAAVK,GAAwCL,CAAAA,CAAOI,CAAPJ,CAAAA,CAAcsB,QAAdtB,GAAyBc,SAAzBd,CAAmCkB,CAAnClB,EAAwDmB,CAAxDnB,CAAxCK,GAAmH,IAC3IgB,GADmJL,CACnJK;AADmJL,OAIvJH,CAAAA;AAJuJG,KAvB3J;;AAgEQ,IAAA,OAAA,CAAA,wBAAA,GAAA,CAAA;;AA7BR,QAAMO,CAAAA,GAAsB,WAACC,CAAD,EAAQxB,CAAR,EAAQA;AACnC,UAAA,CAACwB,CAAD,EAAQ,OAAO,EAAP;AACR,UAAiB,aAAjB,CAAA,CAAOA,CAAP,CAAiB,IAAYA,CAAAA,CAAMC,WAAND,KAAsB3D,MAAnD,EAA2D,MAAM,IAAIoB,SAAJ,CAAc,yCAAd,EAAyDuC,CAAzD,CAAN;AAC/DxB,MAAAA,CAAAA,GAASA,CAAAA,YAAkBrC,KAAlBqC,GAA0BA,CAA1BA,GAAmC,CAACA,CAAD,CAA5CA;AAEM0B,UACAC,CAAAA,GAAwB,SADxBD;AAAAA,UAIAb,CAAAA,GADcrB,CAAAA,CAAUgC,CAAVhC,CAAAA,CACOuB,OADPvB,CAHS,SAGTA,EACqC,UAACwB,CAAD,EAACA;AAChDY,YAAAA,CAAAA,GAAmBZ,CAAAA,CAAMA,KAANA,CAAYW,CAAZX,CAAnBY;AAAAA,YACAxB,CAAAA,GAASwB,CAAAA,CAAiBtB,MAAjBsB,GAA0B,CAA1BA,GAA+BA,CAAAA,CAAiB,CAAjBA,CAA/BA,GAAgD,CAAM,CAD/DA;AAEExB,eAAAA,CAAAA,GAAAA,CAAS,CAATA,IAAcA,CAAAA,GAAQJ,CAAAA,CAAOM,MAA7BF,GAAuCZ,CAAAA,CAAUQ,CAAAA,CAAOI,CAAPJ,CAAVR,CAAvCY,GAAkEY,CAAlEZ;AAAkEY,OAJ1DxB,CAHdkC;AAUC/B,aAAAA,CAAAA,CAAUkB,CAAVlB,CAAAA;AAAUkB,KAfd;;AA6BQ,IAAA,OAAA,CAAA,mBAAA,GAAA,CAAA;;AAPR,QAAMgB,CAAAA,GAAsB,SAAtBA,CAAsB,GAAA;AAACC,UAAAA,CAAAA,GAAS,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAATA;AAAAA,UAAarC,CAAAA,GAAS,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAtBqC;AAGzBjB,aADMiB,CAAAA,CAAOf,OAAPe,CADC,UACDA,EAAsB,UAACd,CAAD,EAACA;AAAmBvB,eAAAA,CAAAA,CAAOuB,CAAAA,CAAMF,SAANE,CAAgB,CAAhBA,EAAmBA,CAAAA,CAAMV,MAANU,GAAe,CAAlCA,CAAPvB,CAAAA;AAAyC,OAAnFqC,CACNjB;AADyF,KAF7F;;AAOQ,IAAA,OAAA,CAAA,mBAAA,GAAA,CAAA;AAAA,QAAA,CAAA,GAAA;AACXrB,MAAAA,SAAAA,EAAAA,CADW;AAEXG,MAAAA,SAAAA,EAAAA,CAFW;AAGXE,MAAAA,KAAAA,EAAAA,CAHW;AAIXC,MAAAA,wBAAAA,EAAAA,CAJW;AAKXyB,MAAAA,mBAAAA,EAAAA,CALW;AAMXM,MAAAA,mBAAAA,EAAAA;AANW,KAAA;AAAA,IAAA,OAAA,CAAA,OAAA,GAAA,CAAA;;;ACkDAE;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,GAAAA,KAAAA,CAAAA;;AAjIf,QAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;AAAA,QACA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CADA;AAAA,QAEA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAFA;AAAA,QAGA,CAAA,GAAA,OAAA,CAAA,0BAAA,CAHA;;AAiIeA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,GAAAA;AAAAA,QAAAA,OAAAA,EAAAA;AAAAA,OAAAA;AAAAA;;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,oBAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,uBAAAA,CAAAA;AAAAA,OAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,IAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,WAAAA,KAAAA,MAAAA,IAAAA,CAAAA,KAAAA,MAAAA,CAAAA,SAAAA,GAAAA,QAAAA,WAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AA1Hf;;AAAA,QAAMC,CAAAA,GAAe,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,QAA/B,EAAyC,OAAzC,EAAkD,SAAlD,EAA6D,SAA7D,EAAwE,OAAxE,CAArB;AAAA,QAGMC,CAAAA,GAAgB,SAAhBA,CAAgB,CAACC,CAAD,EAACA;AAAQxE,UAAAA,CAAAA,GAAU,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAVA;AAEvB,UADJwE,CAAAA,GAASA,CAAAA,IAAU,IAAIC,OAAJ,EAAnBD,EAAuBC,CAClBzE,CAAAA,CAAQ4C,MAAT,EAAiB,OAAO4B,CAAP;;AAEhB,WAAA,IAAIE,CAAAA,GAAI,CAAR,EAAW9B,CAAAA,GAAS5C,CAAAA,CAAQ4C,MAA5B,EAAoC8B,CAAAA,GAAI9B,CAAxC,EAAgD8B,CAAAA,EAAhD;AAAqDF,QAAAA,CAAAA,CAAOG,MAAPH,CAAcrE,MAAAA,CAAOyE,IAAPzE,CAAYH,CAAAA,CAAQ0E,CAAR1E,CAAZG,EAAwB,CAAxBA,CAAdqE,EAA0CrE,MAAAA,CAAOmC,MAAPnC,CAAcH,CAAAA,CAAQ0E,CAAR1E,CAAdG,EAA0B,CAA1BA,CAA1CqE;AAArD;;AACEA,aAAAA,CAAAA;AAAAA,KARX;AAAA,QAYMH,CAAAA,GAAS;AAEXnD,MAAAA,GAAAA,EAAK,aAAC2D,CAAD,EAACA;AACE,YAAA,CAACA,CAAAA,CAAQ/E,GAAT,EAAc,MAAM,IAAIyB,SAAJ,CAAc,yDAAd,CAAN;AAEduD,YAAAA,CAAAA,GAAQ,EAARA;AACAD,YAAAA,CAAAA,CAAQ9E,IAAR8E,IAAwC,aAAxB,CAAA,CAAOA,CAAAA,CAAQ9E,IAAf,CAAhB8E,EAAkD,KAAK,IAAME,CAAX,IAAmBF,CAAAA,CAAQ9E,IAA3B;AAAiC+E,UAAAA,CAAAA,IAAU,MAAMC,CAAN,GAAa,GAAb,GAAmBC,kBAAAA,CAAmBH,CAAAA,CAAQ9E,IAAR8E,CAAaE,CAAbF,CAAnBG,CAA7BF;AAAjC;AAClDA,QAAAA,CAAAA,CAAMlC,MAANkC,GAAe,CAAfA,KAAkBA,CAAAA,GAAQ,MAAMA,CAAAA,CAAMG,KAANH,CAAY,CAAZA,CAAhCA;AAGE9E,YAAAA,CAAAA,GAAUuE,CAAAA,CACZ,IAAIE,OAAJ,CAAY;AAAYrD,UAAAA,MAAAA,EAAAA,CAAAA,CAAMV,OAANU,CAAMV,IAAlB;AAAwCU,0BAAAA,CAAAA,CAAMV,OAANU,CAAMV;AAA9C,SAAZ,CADY6D,EAEZM,CAAAA,CAAQ7E,OAFIuE,CAAVvE;AAAAA,YAIAkF,CAAAA,GAAe/E,MAAAA,CAAOC,MAAPD,CAAc;AAC/BN,UAAAA,MAAAA,EAAQ,KADuB;AAE/BsF,UAAAA,WAAAA,EAAa,SAFkB;AAG/BnF,UAAAA,OAAAA,EAAAA;AAH+B,SAAdG,EAIlB0E,CAAAA,CAAQ3E,IAJUC,CAJfH;AASCoF,eAAAA,KAAAA,CAAOP,CAAAA,CAAQ/E,GAAR+E,GAAcC,CAArBM,EAA6BF,CAA7BE,CAAAA;AAA6BF,OAnB7B;AAsBXG,MAAAA,IAAAA,EAAM,cAACR,CAAD,EAACA;AACG,cAAA,IAAIhD,KAAJ,CAAU,uCAAV,CAAA;AAAU,OAvBT;AA0BXyD,MAAAA,IAAAA,EAAM,cAACT,CAAD,EAACA;AACC,YAAA,CAACA,CAAAA,CAAQ/E,GAAT,EAAc,MAAM,IAAIyB,SAAJ,CAAc,0DAAd,CAAN;AAGZvB,YAAAA,CAAAA,GAAUuE,CAAAA,CACZ,IAAIE,OAAJ,CAAY;AAAYrD,UAAAA,MAAAA,EAAAA,CAAAA,CAAMV,OAANU,CAAMV,IAAlB;AAAwCU,0BAAAA,CAAAA,CAAMV,OAANU,CAAMV;AAA9C,SAAZ,CADY6D,EAEZM,CAAAA,CAAQ7E,OAFIuE,CAAVvE;AAAAA,YAMAuF,CAAAA,GAAYpF,MAAAA,CAAOC,MAAPD,CAAc;AAC5BH,UAAAA,OAAAA,EAAAA,CAD4B;AAE5BH,UAAAA,MAAAA,EAAQ,MAFoB;AAG5B2F,UAAAA,IAAAA,EAAAA,CAAM,GAAWX,CAAAA,CAAAA,SAAjBW,EAAiBX,CAAAA,CAAQ9E,IAAR8E,IAAgB,EAAjCW,CAH4B;AAI5BL,UAAAA,WAAAA,EAAa;AAJe,SAAdhF,EAKf0E,CAAAA,CAAQ3E,IALOC,CANZH;AAaCoF,eAAAA,KAAAA,CAAMP,CAAAA,CAAQ/E,GAAdsF,EAAmBG,CAAnBH,CAAAA;AAAmBG,OA3CnB;AA8CXE,MAAAA,GAAAA,EAAK,aAACZ,CAAD,EAACA;AACE,YAAA,CAACA,CAAAA,CAAQ/E,GAAT,EAAc,MAAM,IAAIyB,SAAJ,CAAc,0DAAd,CAAN;AAGZvB,YAAAA,CAAAA,GAAUuE,CAAAA,CACZ,IAAIE,OAAJ,CAAY;AAAYrD,UAAAA,MAAAA,EAAAA,CAAAA,CAAMV,OAANU,CAAMV,IAAlB;AAAwCU,0BAAAA,CAAAA,CAAMV,OAANU,CAAMV;AAA9C,SAAZ,CADY6D,EAEZM,CAAAA,CAAQ7E,OAFIuE,CAAVvE;AAAAA,YAMAuF,CAAAA,GAAYpF,MAAAA,CAAOC,MAAPD,CAAc;AAC5BH,UAAAA,OAAAA,EAAAA,CAD4B;AAE5BH,UAAAA,MAAAA,EAAQ,KAFoB;AAG5B2F,UAAAA,IAAAA,EAAAA,CAAM,GAAWX,CAAAA,CAAAA,SAAjBW,EAAiBX,CAAAA,CAAQ9E,IAAR8E,IAAgB,EAAjCW,CAH4B;AAI5BL,UAAAA,WAAAA,EAAa;AAJe,SAAdhF,EAKf0E,CAAAA,CAAQ3E,IALOC,CANZH;AAaCoF,eAAAA,KAAAA,CAAMP,CAAAA,CAAQ/E,GAAdsF,EAAmBG,CAAnBH,CAAAA;AAAmBG,OA/DnB;AAkEXG,MAAAA,MAAAA,EAAQ,iBAACb,CAAD,EAACA;AACC,cAAA,IAAIhD,KAAJ,CAAU,yCAAV,CAAA;AAAU,OAnET;AAsEX8D,MAAAA,KAAAA,EAAO,eAACd,CAAD,EAACA;AACE,cAAA,IAAIhD,KAAJ,CAAU,wCAAV,CAAA;AAAU,OAvET;AA0EXgD,MAAAA,OAAAA,EAAS,iBAACA,CAAD,EAACA;AACA,cAAA,IAAIhD,KAAJ,CAAU,0CAAV,CAAA;AAAU,OA3ET;AA8EX+D,MAAAA,OAAAA,EAAS,iBAACf,CAAD,EAACA;AACA,cAAA,IAAIhD,KAAJ,CAAU,0CAAV,CAAA;AAAU,OA/ET;AAkFXgE,MAAAA,EAAAA,EAAIhB,aAAAA,CAAAA,EAAAA;AACI,YAAA,CAACA,CAAD,EAAU,MAAM,IAAItD,SAAJ,CAAc,oDAAd,CAAN;AACV,YAAA,CAACsD,CAAAA,CAAQhF,MAAT,IAASA,CAAmE,CAAnEA,KAAWyE,CAAAA,CAAatB,OAAbsB,CAAqBO,CAAAA,CAAQhF,MAARgF,CAAeiB,WAAfjB,EAArBP,CAApB,EAAgF,MAAM,IAAI/C,SAAJ,CAAc,2DAAd,CAAN;AAChF,YAAA,CAACsD,CAAAA,CAAQ/E,GAAT,EAAc,MAAM,IAAIyB,SAAJ,CAAc,wDAAd,CAAN;AAGX,eAAA,KAAKsD,CAAAA,CAAQhF,MAARgF,CAAekB,WAAflB,EAAL,EAAmCA,CAAnC,EACFmB,IADE,CACG,UAAChF,CAAD,EAACA;AAEC,cAAA,CAACA,CAAAA,CAASiF,EAAV,EAAc;AACRxE,gBAAAA,CAAAA,GAA8BT,oBAAAA,MAAAA,CAAAA,CAAAA,CAASkF,MAATlF,EAA0BA,UAA1BA,EAA0BA,MAA1BA,CAA0BA,CAAAA,CAASlB,GAAnCkB,CAA9BS;AACC0E,mBAAAA,CAAAA,CAAUpF,OAAVoF,CAAUpF,IAAVoF,CAAenF,CAAfmF,EAAyBH,IAAzBG,CAA8B,UAACzE,CAAD,EAACA;AAAgB,oBAAA,IAAI0E,CAAAA,CAAW5E,OAAX4E,CAAW5E,oBAAf,CAAoCC,CAApC,EAA6CC,CAA7C,CAAA;AAA6CA,aAA5FyE,CAAAA;AAIJnF;;AAAAA,iBAAAA,CAAAA,CAASmB,KAATnB,EAAAA;AAASmB,SATjB,EAWFkE,KAXE,CAWI,UAACC,CAAD,EAACA;AACEA,gBAAAA,CAAAA;AAAAA,SAZP,CAAA;AAYOA,OApGP;AAwGXC,MAAAA,IAAAA,EAAMC,cAAAA,CAAAA,EAAAA;AACI,cAAA,IAAI3E,KAAJ,CAAU,uCAAV,CAAA;AAAU;AAzGT,KAZf;AAAA,QA0HewC,CAAAA,GAAAA,CA1Hf;;AA0HeA,IAAAA,OAAAA,CAAAA,OAAAA,GAAAA,CAAAA;;;;;;;;ACnHAoC;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,GAAAA,KAAAA,CAAAA;AAdf,QAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;AAAA,QACA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CADA;;AAceA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,GAAAA;AAAAA,QAAAA,OAAAA,EAAAA;AAAAA,OAAAA;AATf;;AAAA,QAAMA,CAAAA,GAAM;AAERC,MAAAA,IAAAA,EAAM,gBAAA;AAACC,YAAAA,CAAAA,GAAW,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,IAAXA;AAAAA,YAAuBC,CAAAA,IAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,EAAX,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,MAAPA,CAAvBD;AACA,YAAA,CAACA,CAAD,EAAW,MAAM,IAAIpF,SAAJ,CAAc,2DAAd,EAA2EoF,CAA3E,CAAN;AACPE,eAAAA,CAAAA,CAAQhB,OAARgB,CAAQhB,EAARgB,CAAWF,CAAXE,EAAqBb,IAArBa,CAA0BV,CAAAA,CAAUS,OAAVT,CAAUS,CAAVT,CAA1BU,CAAAA;AAAoCD;AAJvC,KAAZ;AAAA,QASeH,CAAAA,GAAAA,CATf;AASeA,IAAAA,OAAAA,CAAAA,OAAAA,GAAAA,CAAAA;;;;;;ACVf;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA,GAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,UAAA,EAAA;AAAA,MAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAA,GAAA,EAAA,eAAA;AAAA,eAAA,CAAA,CAAA,OAAA;AAAA;AAAA,KAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,QAAA,EAAA;AAAA,MAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAA,GAAA,EAAA,eAAA;AAAA,eAAA,CAAA,CAAA,OAAA;AAAA;AAAA,KAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,UAAA,EAAA;AAAA,MAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAA,GAAA,EAAA,eAAA;AAAA,eAAA,CAAA,CAAA,OAAA;AAAA;AAAA,KAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAAA,MAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAA,GAAA,EAAA,eAAA;AAAA,eAAA,CAAA,CAAA,OAAA;AAAA;AAAA,KAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,KAAA,EAAA;AAAA,MAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAA,GAAA,EAAA,eAAA;AAAA,eAAA,CAAA,CAAA,OAAA;AAAA;AAAA,KAAA,CAAA;AAJA,QAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;AAAA,QACA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CADA;AAAA,QAEA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAFA;AAAA,QAGA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAHA;AAAA,QAIA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAJA;;AAIA,aAAA,CAAA,CAAA,CAAA,EAAA;AAAA,aAAA,CAAA,IAAA,CAAA,CAAA,UAAA,GAAA,CAAA,GAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA;AAAA;;;;;;;;;;;;ACJA;;AAIA;AACA,IAAME,QAAQ,GAAG,IAAI/G,cAAJ,CAAa,KAAb,EAAoB,oCAApB,EAA0D,IAA1D,EAAgE;AAAE,mBAAiB;AAAnB,CAAhE,EAA2F;AAAEuF,EAAAA,WAAW,EAAC;AAAd,CAA3F,CAAjB;AACA2B,OAAO,CAACC,GAAR,CAAYJ,QAAZ,GAEA;;AACAtC,aAAOwB,EAAP,CAAUc,QAAV,EAAoBX,IAApB,CAAyBlF,eAASJ,IAAlC,EAAwCsF,IAAxC,CAA6C,UAAAjG,IAAI;AAAA,SAAI+G,OAAO,CAACC,GAAR,CAAYhH,IAAZ,CAAJ;AAAA,CAAjD,GAEA;AACA","file":"index.debug.274754b2.map","sourceRoot":"..\\samples","sourcesContent":["// endpoint options class\r\nclass Endpoint {\r\n    constructor (method = 'GET', url = '#', data = {}, headers = [], ...args) {\r\n         headers = (headers instanceof Array) ? headers : [headers];\r\n\r\n        this.method = method;\r\n        this.url = url;\r\n        this.data = data;\r\n        this.headers = headers;\r\n        this.args = Object.assign({}, ...args);\r\n    };\r\n\r\n    options(...additionalArgs) {\r\n        return Object.assign({\r\n            method: this.method, \r\n            url: this.url, \r\n            data: this.data, \r\n            headers: this.headers, \r\n        }, this.args, ...additionalArgs);\r\n    }\r\n};\r\n\r\nexport default Endpoint;\r\n","\r\nconst mime = {\r\n\r\n    css:    'text/css',\r\n    html:   'text/html',\r\n    script: 'text/javascript',\r\n\r\n    json:   'application/json',\r\n    xml:    'application/xml',\r\n    xhtml:  'application/xhtml+xml',\r\n    stream: 'application/octet-stream'\r\n\r\n};\r\n\r\nexport default mime;\r\n","import _mime from './mime-type.core';\r\n\r\n\r\n\r\nconst sanitize = {\r\n\r\n    core: (response) => {\r\n        var contentType = response.headers ? response.headers.get('content-type') : '';\r\n        if (contentType.includes(_mime.json)) return response.json();\r\n        if (contentType.includes(_mime.html)) return response.text();\r\n        if (contentType.includes(_mime.stream)) return response.blob();\r\n        throw new TypeError('content-type not available');\r\n    },\r\n\r\n    json: (response) => {\r\n        var contentType = response.headers ? response.headers.get('content-type') : '';\r\n        if (contentType.includes(_mime.json)) return response.json();\r\n        throw new TypeError('content-type not available');\r\n    },\r\n\r\n    html: (response) => {\r\n        var contentType = response.headers ? response.headers.get('content-type') : '';\r\n        if (contentType.includes(_mime.json)) return response.text();\r\n        throw new TypeError('content-type not available');\r\n    },\r\n\r\n    stream: (response) => {\r\n        var contentType = response.headers ? response.headers.get('content-type') : '';\r\n        if (contentType.includes(_mime.json)) return response.blob();\r\n        throw new TypeError('content-type not available');\r\n    }\r\n\r\n};\r\n\r\nexport default sanitize;\r\n","\r\n// invalid response error\r\nconst InvalidResponseError = function (message = '', exc = null) {\r\n    this.name = 'InvalidResponseError';\r\n    this.message = message;\r\n    this.exc = exc;\r\n};\r\nInvalidResponseError.prototype = new Error();\r\n\r\nexport default { InvalidResponseError };","// convert an object to a json string\r\nexport const stringify = (object) => { return JSON.stringify(object); };\r\n\r\n// parse a json string to a js object\r\nexport const parseJSON = (object) => { return JSON.parse(object); };\r\n\r\n// does a deep clone of an object (functions not allowed)\r\nexport const clone = (object) => { return parseJSON(stringify(object)); };\r\n\r\n// replace placeholder parameters inside a string with provided values\r\n// i.e. ('You are {0} years old {1}', [32], null, true ) => returns the resulting string with values replaced using the values array\r\n// @placholder: string => \"You are {0} years old\"\r\n// @values:     object/array => 26 or [26]\r\n// @regex:      regex => defaults to digits {0}, {1}... {n} */\r\n// @limit:      boolean => trim result to length of values\r\nexport const replacePlaceholderParams = (placeholder, values, limit) => {\r\n    if (!placeholder) return '';\r\n    if (typeof placeholder !== 'string') throw new TypeError('invalid placeholder or placeholder is not an string', placeholder);\r\n    if (regex && !(regex instanceof RegExp)) throw new TypeError('invalid regex: the regex is not a properly formatted regular expression i.e. /{\\\\d}/g ', regex);\r\n    values = values instanceof Array ? values : [values];\r\n    const regex = /{\\d}|{\\d,\\d}|{\\d,\\d-\\d}/g;\r\n\r\n    // trim the placeholder to size base on the array of values length\r\n    let index = -1;\r\n    const count = values.length; \r\n    const tag = `{${count - 1}}`; // placeholder tags start at index 0\r\n    const nextTag = `{${count}}`; // detect if next tag exists\r\n    const tagExistsInPlaceholder = placeholder.indexOf(tag) > -1;\r\n    const nextTagExistsInPlaceholder = placeholder.indexOf(nextTag) > -1;\r\n    const trimToIndex = placeholder.indexOf(tag) + tag.length;\r\n    placeholder = (limit) ? placeholder.substring(0, (tagExistsInPlaceholder && nextTagExistsInPlaceholder) ? trimToIndex : placeholder.length) : placeholder;\r\n\r\n    // insert values in placeholder tags\r\n    let result = placeholder.replace(regex, (match) => { \r\n        // introducing index based string manipulation (from-to index)\r\n        const substring = match.substring(1, match.length - 1).split(','); // [..., x-y]\r\n        const substringStartIndex = (substring.length === 1) ? 0 : substring[1].split('-')[0]; // check substring values\r\n        const substringLength = (substring.length === 1) ? undefined : substring[1].split('-')[1]; // declare substring length\r\n        const manipulated = (++index < count) ? (values[index] !== undefined ? values[index].toString().substring(substringStartIndex, substringLength) : null) : match;\r\n        return manipulated;\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// replace placeholder parameters inside an object with provided values\r\n// i.e. ( { a: '{0}', b: { c: {1} }}, ['value-a', 'value-c'] ) => returns an object with values replaced using the values array\r\n// @model:      object => defaults to {}\r\n// @values:     object/array => 26 or [26]\r\n// @regex:      regex => defaults to digits {0}, {1}... {n} */\r\nexport const replaceObjectParams = (model, values) => {\r\n    if (!model) return {};\r\n    if (typeof model !== 'object' && model.constructor === Object) throw new TypeError(\"invalid model or model is not an object\", model);\r\n    values = values instanceof Array ? values : [values];\r\n\r\n    const regexJSONPlaceholder = /\"{\\d}\"/g;\r\n    const regexPlaceholderIndex = /{(.*?)}/;\r\n\r\n    const stringified = stringify(model);\r\n    const result = stringified.replace(regexJSONPlaceholder, (match) => { \r\n        const placeholderIndex = match.match(regexPlaceholderIndex);\r\n        const index = (placeholderIndex.length > 0) ? placeholderIndex[1] : -1;\r\n        return (index > -1 && index < values.length) ? stringify(values[index]) : match;\r\n    });\r\n\r\n    return parseJSON(result);\r\n};\r\n\r\n// replaces placeholder values sing the object properties; object must be a of single depth\r\n// i.e. (/api/{userID}/get/email, { userID: 123 } => returns userID placeholder replaced with the object.userID value\r\n// @string:     string => string with placeholder params {n}\r\n// @object:     object => flat object with properties matching the placeholder params\r\nexport const replaceStringParams = (string = '', object = {} /* flat object */) => {\r\n    const regex = /{(.*?)}/g;\r\n    let result = string.replace(regex, (match) => { return object[match.substring(1, match.length - 1)]; });\r\n    return result;\r\n};\r\n\r\n// export defaults\r\nexport default {\r\n    stringify,\r\n    parseJSON,\r\n    clone,\r\n    replacePlaceholderParams,\r\n    replaceObjectParams,\r\n    replaceStringParams\r\n};\r\n","import _mime from './mime-type.core';\r\nimport _sanitize from './sanitize.core';\r\nimport _exception from './exception.core';\r\nimport { stringify as _stringify, clone as _clone } from '../common/utility.common';\r\n\r\n\r\n// available fetch request types\r\nconst requestTypes = ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'TRACE', 'OPTIONS', 'CONNECT', 'PATCH']; \r\n\r\n// append headers to header instance\r\nconst appendHeaders = (header, headers = [] /* array containing header objects */) => {\r\n    header = header || new Headers();\r\n    if (!headers.length) return header;\r\n  \r\n    for (let i = 0, length = headers.length; i < length; i++) header.append(Object.keys(headers[i])[0], Object.values(headers[i])[0]);\r\n    return header;\r\n};\r\n\r\n// loader core (get, post, do)\r\nconst loader = {\r\n\r\n    get: (options /* { method = '', url = '', data = {}, headers = [], ...args } */) => {\r\n        if (!options.url) throw new TypeError('loader.get => options.url is invalid, null or undefined');\r\n\r\n        let query = '';\r\n        if (options.data && typeof options.data === 'object') for (const prop in options.data) query += ('&' + prop + '=' + encodeURIComponent(options.data[prop]));\r\n        if (query.length > 0) query = '?' + query.slice(1);\r\n\r\n        // generate options and headers (extend if neccessary)\r\n        const headers = appendHeaders(\r\n            new Headers({ 'Accept': _mime.json, 'Content-Type': _mime.json }), \r\n            options.headers\r\n        );\r\n        const fetchOptions = Object.assign({\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers\r\n        }, options.args);\r\n        return fetch((options.url + query), fetchOptions);\r\n    },\r\n\r\n    head: (options /* {} */) => {\r\n        throw new Error('loader.head => not yet implemented...');\r\n    },\r\n\r\n    post: (options /* { method = '', url = '', data = {}, headers = [], ...args } */) => {\r\n        if (!options.url) throw new TypeError('loader.post => options.url is invalid, null or undefined');\r\n\r\n        // generate headers (extend if neccessary)\r\n        const headers = appendHeaders(\r\n            new Headers({ 'Accept': _mime.json, 'Content-Type': _mime.json }), \r\n            options.headers\r\n        );\r\n\r\n        // request options\r\n        const construct = Object.assign({\r\n            headers,\r\n            method: 'POST',\r\n            body: _stringify(options.data || {}),\r\n            credentials: 'include'\r\n        }, options.args);\r\n\r\n        return fetch(options.url, construct);\r\n    },\r\n\r\n    put: (options /* { method = '', url = '', data = {}, headers = [], ...args } */) => {\r\n        if (!options.url) throw new TypeError('loader.post => options.url is invalid, null or undefined');\r\n\r\n        // generate headers (extend if neccessary)\r\n        const headers = appendHeaders(\r\n            new Headers({ 'Accept': _mime.json, 'Content-Type': _mime.json }),\r\n            options.headers\r\n        );\r\n\r\n        // request options\r\n        const construct = Object.assign({\r\n            headers,\r\n            method: 'PUT',\r\n            body: _stringify(options.data || {}),\r\n            credentials: 'include'\r\n        }, options.args);\r\n\r\n        return fetch(options.url, construct);\r\n    },\r\n\r\n    delete: (options /* {} */) => {\r\n        throw new Error('loader.delete => not yet implemented...');\r\n    },\r\n\r\n    trace: (options /* {} */) => {\r\n        throw new Error('loader.trace => not yet implemented...');\r\n    },\r\n\r\n    options: (options /* {} */) => {\r\n        throw new Error('loader.options => not yet implemented...');\r\n    },\r\n\r\n    connect: (options /* {} */) => {\r\n        throw new Error('loader.connect => not yet implemented...');\r\n    },\r\n\r\n    do (options /* { method = '', url = '', data = {}, headers = [], ...args } */) {\r\n        if (!options) throw new TypeError('loader.do => options is invalid, null or undefined');\r\n        if (!options.method || (requestTypes.indexOf(options.method.toUpperCase()) === -1)) throw new TypeError('loader.do => options.method is invalid, null or undefined');\r\n        if (!options.url) throw new TypeError('loader.do => options.url is invalid, null or undefined');\r\n      \r\n        // execute the xhr request\r\n        return this[options.method.toLowerCase()](options)\r\n            .then((response) => {\r\n                // cast a custom exception to manage invalid status codes from the service calls\r\n                if (!response.ok) {\r\n                    const message = `response.status: ${response.status} | url: ${response.url}`;\r\n                    return _sanitize.core(response).then((exc) => { throw new _exception.InvalidResponseError(message, exc); });\r\n                }\r\n\r\n                // return response copy\r\n                return response.clone();\r\n            })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    },\r\n\r\n    sync (queue) {\r\n        throw new Error('loader.sync => not yet implemented...');\r\n    }\r\n\r\n};\r\n\r\nexport default loader;\r\n","import _loader from '../core/loader.core';\r\nimport _sanitize from '../core/sanitize.core';\r\n\r\n\r\n\r\nconst api = {\r\n\r\n    call: (endpoint = null, data, type = 'json') => {\r\n        if(!endpoint) throw new TypeError('api.call(endpoint, type) requries a valid endpoint object', endpoint);\r\n        return _loader.do(endpoint).then(_sanitize[type]);\r\n    }\r\n\r\n};\r\n\r\nexport default api;\r\n","export { default as Endpoint } from './core/endpoint.core';\r\nexport { default as loader } from './core/loader.core';\r\nexport { default as sanitize } from './core/sanitize.core';\r\nexport { default as mime } from './core/mime-type.core';\r\nexport { default as api } from './api/global.api';\r\n","import { Endpoint, loader, api, sanitize } from '../dist';\r\n\r\n\r\n\r\n// create an endpoint\r\nconst endpoint = new Endpoint('get', 'https://reqres.in/api/users?page=2', null, { 'cache-control': 5000 }, { credentials:'omit' });\r\nconsole.log(endpoint);\r\n\r\n// call the root loader and sanitize the repsonse data\r\nloader.do(endpoint).then(sanitize.json).then(data => console.log(data));\r\n\r\n// you can also call the wrapper function for loader as a shorthand\r\n//api.call(endpoint).then(data => console.log(data));"]}